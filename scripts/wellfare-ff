#!/usr/local/bin/python3

import argparse
import traceback
import pkg_resources
import scipy.optimize

from multiprocessing import cpu_count

from wellfare.molecule import Molecule
from wellfare.qmparser import extract_molecular_data
from wellfare.messages import *
from wellfare.forcefield import *

########################################################
#                                                      #
# This is where the command line arguments are defined #
#                                                      #
########################################################

parser = argparse.ArgumentParser(
    description="WellFARe: Method for the Incremental Construction and"
                " Exploration of the Potential Energy Surface",
    epilog="recognised filetypes: gaussian, orca, turbomole, adf, xyz")
parser.add_argument("--version", help="prints the version number",
                    action='store_true')
parser.add_argument("-P", "--numproc", type=int,
                    help="number of processes for parallel execution",
                    default="0")
parser.add_argument("-v", "--verbosity", help="increase output verbosity",
                    type=int, choices=[0, 1, 2, 3], default=3)
parser.add_argument("inputfile", metavar='file',
                    help="input file(s) with molecular structure")

args = parser.parse_args()

# Default number of cores for processing is requested with "-p 0" and uses
# all available cores.
if args.numproc == 0:
    args.numproc = cpu_count()


############################################
#                                          #
# The main part of the program starts here #
#                                          #
############################################

def main(main_start_time):
    # Print GPL v3 statement and program header
    if args.version is True:
        print(
            "Version {}".format(pkg_resources.require("wellfare")[0].version))
        return
    if args.verbosity >= 1:
        msg_program_header("WellFARe-FF",
                           pkg_resources.require("wellfare")[0].version)

    molecule = Molecule("Input Structure")
    extract_molecular_data(args.inputfile, molecule, verbosity=0,
                           read_coordinates=True,
                           read_bond_orders=True, build_angles=True,
                           build_dihedrals=True, read_force_constants=True,
                           read_multiplicity=True, read_qm_energy=True,
                           read_rotational_symmetry_number=True,
                           cpu_number=args.numproc)

    molecular_force_field = ForceField(molecule,
                                       parametrize_bond_stretches=True,
                                       parametrize_angle_bends=True,
                                       verbosity=args.verbosity)

    print("\nInitial geometry")
    print(molecule.print_mol(output="internals"))


    # print("\nOptimising geometry of molecule:")
    # xopt = scipy.optimize.fmin_bfgs(molecular_force_field.ff_energy,
    #                                 initialcoords2optimiseR, gtol=0.00001)
    #
    # print("\nOptimized Geometry:")
    # new_coordinates = xopt * bohr_to_ang(1.0)
    # molecule.set_coordinates(new_coordinates)
    # print(molecule.print_mol(output="internals"))

    # print("Energy:")
    # print(molecular_force_field.total_energy_coeff(molecular_force_field.coefficients()))

    print("Gradient:")
    print(molecular_force_field.ff_gradient())
    print("Hessian:")
    print(molecular_force_field.ff_hessian())

    initialcoords2optimiseR = molecular_force_field.coordinates()
    print("\n Initial energy: {}".format(
        molecular_force_field.ff_energy(initialcoords2optimiseR)))

    initialcoords2optimiseR[6] = initialcoords2optimiseR[6] + 5.0
    print("Energy:")
    print(molecular_force_field.ff_energy(initialcoords2optimiseR))
    # print("Gradient:")
    # print(molecular_force_field.ff_gradient(coordinates=initialcoords2optimiseR))

    coeff = molecular_force_field.ff_coefficients()
    for i in range(len(coeff)):
        coeff[i] = coeff[i]+0.1

    print("Gradient:")
    print(molecular_force_field.ff_gradient(coordinates=initialcoords2optimiseR,coefficients=coeff))
    print("Hessian:")
    print(molecular_force_field.ff_hessian(coordinates=initialcoords2optimiseR,coefficients=coeff))


    # from wellfare.thermochemistry import thermochemical_analysis
    # molecule.H_QM = molecular_force_field.ff_hessian()
    # thermochemical_analysis(molecule, verbosity=3)


    # Print program footer
    if args.verbosity >= 1:
        msg_program_footer(main_start_time)


if __name__ == '__main__':
    prg_start_time = time.time()
    try:
        main(prg_start_time)
    except KeyboardInterrupt:
        msg_program_error("Keyboard interrupt by user",
                          starttime=prg_start_time)
    except:
        error_txt = "This didn't go according to plan: Tell Matthias!"
        error_txt += "\n\nPlease email the command line arguments you"
        error_txt += " used\ntogether with the files you were analyzing"
        error_txt += " and the\ninformation below (within the"
        error_txt += " exclamation marks)\nto: matthias.lein@gmail.com.\n\n"
        error_txt += "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n"

        # Get info about the exception
        exceptiondata = traceback.format_exc().splitlines()
        # Extract from this data: Exception type first, then traceback
        exception_type = exceptiondata[-1]
        exception_line = exceptiondata[-3].split()[3]
        exception_module = exceptiondata[-3].split()[5]
        # Print exception type
        error_txt += "! {}\n".format(exception_type)
        # Print line number and module
        error_txt += "! Line {} in module {}\n".format(exception_line,
                                                       exception_module)
        error_txt += "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n"
        msg_program_error(error_txt, starttime=prg_start_time)
